From 04be5041b17e03eb5b9ea474431369fa6a76b6b8 Mon Sep 17 00:00:00 2001

From: Madhava Reddy Siddareddygari <msiddare@cisco.com>
Date: 2021-09-29 13:53:28 -0700

Subject: [PATCH] support reading mdio config from ACPI tables

Current mdio-mux does not support reading configuration
from ACPI tables.

cisco-8000 platform configures mdio phy config through ACPI
tables.

Added support in the mdio-mux driver to read from ACPI

Signed-off-by: Madhava Reddy Siddareddygari <msiddare@cisco.com>
---
 drivers/net/mdio/mdio-mux.c |   27 ++++++++++++++++++---------
 1 file changed, 18 insertions(+), 9 deletions(-)

diff --git a/drivers/net/mdio/mdio-mux.c b/drivers/net/mdio/mdio-mux.c
index ccb3ee704..e70c8d36a 100644
--- a/drivers/net/mdio/mdio-mux.c
+++ b/drivers/net/mdio/mdio-mux.c
@@ -101,16 +101,16 @@ int mdio_mux_init(struct device *dev,
 		  struct mii_bus *mux_bus)
 {
 	struct device_node *parent_bus_node;
-	struct device_node *child_bus_node;
+	struct fwnode_handle *child_bus_node;
 	int r, ret_val;
 	struct mii_bus *parent_bus;
 	struct mdio_mux_parent_bus *pb;
 	struct mdio_mux_child_bus *cb;
 
-	if (!mux_node)
-		return -ENODEV;
-
 	if (!mux_bus) {
+		if (!mux_node)
+			return -ENODEV;
+
 		parent_bus_node = of_parse_phandle(mux_node,
 						   "mdio-parent-bus", 0);
 
@@ -141,16 +141,20 @@ int mdio_mux_init(struct device *dev,
 	pb->mii_bus = parent_bus;
 
 	ret_val = -ENODEV;
-	for_each_available_child_of_node(mux_node, child_bus_node) {
-		int v;
+	device_for_each_child_node(dev, child_bus_node) {
+		u32 v;
+		u32 phy_mask;
 
-		r = of_property_read_u32(child_bus_node, "reg", &v);
+		r = fwnode_property_read_u32(child_bus_node, "reg", &v);
 		if (r) {
 			dev_err(dev,
 				"Error: Failed to find reg for child %pOF: %pe\n",
 				child_bus_node, ERR_PTR(r));
 			continue;
 		}
+		r = fwnode_property_read_u32(child_bus_node, "phy_mask", &phy_mask);
+		if (r)
+			phy_mask = 0;
 
 		cb = devm_kzalloc(dev, sizeof(*cb), GFP_KERNEL);
 		if (!cb) {
@@ -173,7 +177,12 @@ int mdio_mux_init(struct device *dev,
 			cb->mii_bus->read_c45 = mdio_mux_read_c45;
 		if (parent_bus->write_c45)
 			cb->mii_bus->write_c45 = mdio_mux_write_c45;
-		r = of_mdiobus_register(cb->mii_bus, child_bus_node);
+		cb->mii_bus->phy_mask = phy_mask;
+		if (is_of_node(child_bus_node))
+			r = of_mdiobus_register(cb->mii_bus, to_of_node(child_bus_node));
+		else
+			r = mdiobus_register(cb->mii_bus);
+
 		if (r) {
 			mdiobus_free(cb->mii_bus);
 			if (r == -EPROBE_DEFER) {
@@ -199,7 +208,7 @@ int mdio_mux_init(struct device *dev,
 
 err_loop:
 	mdio_mux_uninit_children(pb);
-	of_node_put(child_bus_node);
+	fwnode_handle_put(child_bus_node);
 err_pb_kz:
 	put_device(&parent_bus->dev);
 err_parent_bus:
