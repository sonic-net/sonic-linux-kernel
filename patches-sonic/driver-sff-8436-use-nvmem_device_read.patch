replace memory_accessor with nvmem_device_read

From: Guohan Lu <gulv@microsoft.com>

Now that the sff_8436 uses the NVMEM framework, replace the
memory_accessor in the setup() callback with nvmem API calls.
---
 drivers/misc/eeprom/sff_8436_eeprom.c |   31 +------------------------------
 include/linux/i2c/sff-8436.h          |    4 ++--
 2 files changed, 3 insertions(+), 32 deletions(-)

diff --git a/drivers/misc/eeprom/sff_8436_eeprom.c b/drivers/misc/eeprom/sff_8436_eeprom.c
index 9e6a7bf43..4688597eb 100644
--- a/drivers/misc/eeprom/sff_8436_eeprom.c
+++ b/drivers/misc/eeprom/sff_8436_eeprom.c
@@ -99,7 +99,6 @@
 
 struct sff_8436_data {
 	struct sff_8436_platform_data chip;
-	struct memory_accessor macc;
 	int use_smbus;
 
 	/*
@@ -757,30 +756,6 @@ static int sff_8436_write(void *priv, unsigned int off, void *val, size_t count)
 
 /*-------------------------------------------------------------------------*/
 
-/*
- * This lets other kernel code access the eeprom data. For example, it
- * might hold a board's Ethernet address, or board-specific calibration
- * data generated on the manufacturing floor.
- */
-
-static ssize_t sff_8436_macc_read(struct memory_accessor *macc, char *buf,
-			 off_t offset, size_t count)
-{
-	struct sff_8436_data *sff_8436 = container_of(macc, struct sff_8436_data, macc);
-
-	return sff_8436_read_write(sff_8436, buf, offset, count, QSFP_READ_OP);
-}
-
-static ssize_t sff_8436_macc_write(struct memory_accessor *macc, const char *buf,
-             off_t offset, size_t count)
-{
-	struct sff_8436_data *sff_8436 = container_of(macc, struct sff_8436_data, macc);
-
-	return sff_8436_read_write(sff_8436, buf, offset, count, QSFP_WRITE_OP);
-}
-
-/*-------------------------------------------------------------------------*/
-
 static void sff_8436_remove(struct i2c_client *client)
 {
 	struct sff_8436_data *sff_8436;
@@ -861,8 +836,6 @@ static int sff_8436_eeprom_probe(struct i2c_client *client,
 	sff_8436->use_smbus = use_smbus;
 	sff_8436->chip = chip;
 
-	sff_8436->macc.read = sff_8436_macc_read;
-
 	if (!use_smbus ||
 			(i2c_check_functionality(client->adapter,
 				I2C_FUNC_SMBUS_WRITE_I2C_BLOCK)) ||
@@ -880,8 +853,6 @@ static int sff_8436_eeprom_probe(struct i2c_client *client,
 		 */
 		unsigned write_max = 1;
 
-		sff_8436->macc.write = sff_8436_macc_write;
-
 		if (write_max > io_limit)
 			write_max = io_limit;
 		if (use_smbus && write_max > I2C_SMBUS_BLOCK_MAX)
@@ -938,7 +909,7 @@ static int sff_8436_eeprom_probe(struct i2c_client *client,
 	}
 
 	if (chip.setup)
-		chip.setup(&sff_8436->macc, chip.context);
+		chip.setup(sff_8436->nvmem, chip.context);
 
 	return 0;
 
diff --git a/include/linux/i2c/sff-8436.h b/include/linux/i2c/sff-8436.h
index 4df48ad89..3e505676f 100644
--- a/include/linux/i2c/sff-8436.h
+++ b/include/linux/i2c/sff-8436.h
@@ -2,7 +2,7 @@
 #define _LINUX_SFF_8436_H
 
 #include <linux/types.h>
-#include <linux/memory.h>
+#include <linux/nvmem-consumer.h>
 
 /*
  * As seen through Linux I2C, differences between the most common types of I2C
@@ -24,7 +24,7 @@ struct sff_8436_platform_data {
 #define SFF_8436_FLAG_IRUGO		0x20	/* sysfs-entry will be world-readable */
 #define SFF_8436_FLAG_TAKE8ADDR	0x10	/* take always 8 addresses (24c00) */
 
-	void		(*setup)(struct memory_accessor *, void *context);
+	void		(*setup)(struct nvmem_device *nvmem, void *context);
 	void		*context;
 };
 
